cbuffer staticMeshBuffer : register(b0)
{
    float4x4 W;
    float4x4 VP;
};

cbuffer grassParams : register(b2)
{
    float uTime;
    float strength;
    float scaleVal;
    float gradientPower;

    float3 BaseColorBottom; float pad1;
    float3 BaseColorTop;    float pad2;
    float3 BaseColorThird;  float pad3;

    float WindIntensity;
    float WindWeight;
    float SpecularPower;
    float SpecularIntensity;

    float3 LightDir; float pad4;
    float areaSize;
    float3 pad5;
};

Texture2D<float4> noiseTex : register(t1);
Texture2D<float4> heightmapTex : register(t2);
SamplerState samp : register(s0);

struct VS_INPUT
{
    float3 Pos : POS;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
    float3 InstancePosition : INSTANCEPOSITION;
};

struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
    float2 TexCoords : TEXCOORD;
    float factor : TEXCOORD1;
    float3 worldPos : TEXCOORD2;
    float3 normal : TEXCOORD3;
    float2 dynamicUVOffset : TEXCOORD4;
};

VS_OUTPUT VS(VS_INPUT input)
{
    VS_OUTPUT output;

    float factor = saturate(1.0 - input.TexCoords.y);
    factor = pow(factor, gradientPower);

    float3 originalWorldPos = input.Pos + input.InstancePosition;
    float3 worldPos = originalWorldPos;

    // wind sway
    float swayY = sin(worldPos.x*2.0 + uTime*2.0)*0.1 * WindIntensity * WindWeight * 10;
    float swayX = sin(worldPos.z*3.0 + uTime*1.5)*0.05 * WindIntensity * WindWeight * 60;
    float swayZ = sin(worldPos.x*3.0 + uTime*1.5)*0.05 * WindIntensity * WindWeight * 35;

    float2 noiseUV = (worldPos.xz + float2(areaSize, areaSize)) / (2.0f*areaSize);
    float noiseVal = noiseTex.SampleLevel(samp, noiseUV, 0).r;

    float2 heightUV = (worldPos.xz + float2(areaSize, areaSize)) / (2.0f * areaSize);
    float heightVal = heightmapTex.SampleLevel(samp, heightUV, 0).r;

    factor += heightVal * 0.2;

    float extraOffset = noiseVal * 0.1 * factor;
    worldPos.x += extraOffset;
    worldPos.z += extraOffset*0.5;

    worldPos.y += swayY*factor;
    worldPos.x += swayX*factor;
    worldPos.z += swayZ*factor;

    float3 finalWorldPos = worldPos;

    float4 wpos = mul(float4(finalWorldPos,1), W);
    output.Pos = mul(wpos, VP);
    output.TexCoords = input.TexCoords * scaleVal;
    output.factor = factor;

    float3 N = normalize(mul((float3x3)W, input.Normal));
    output.normal = N;
    output.worldPos = mul(float4(finalWorldPos,1),W).xyz;

    // get dynamicUVOffset
    float2 posOffset = (finalWorldPos.xz - originalWorldPos.xz) / (2.0f * areaSize);
    output.dynamicUVOffset = posOffset;

    return output;
}
