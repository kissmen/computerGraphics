cbuffer staticMeshBuffer : register(b0)
{
    float4x4 W;
    float4x4 VP;
};

cbuffer waterParams : register(b1)
{
    float uTime;
    float strength;
    float scaleVal;
    float pad;
    float3 uColor; // basic blue
    float pad2;
};

Texture2D<float4> tex : register(t0);
SamplerState samp : register(s0);

// Simple functions for complex sinusoidal warping of uv
float2 distortUV(float2 uv, float t)
{
    // Stacking using four sine curves
    // Frequency  amplitude (0.05) and phase (uTime*some value)

    // Waveform 1 for x
    uv.x += 0.06 * sin(uv.y * 3.0 + t * 1.6);
    // Waveform 2 for y
    uv.y += 0.05 * sin(uv.x * 2.5 + t * 1.2);
    // Waveform 3 for x
    uv.x += 0.03 * sin(uv.y * 5.0 + t * 0.8);
    // Waveform 4 for y
    uv.y += 0.02 * sin(uv.x * 7.0 + t * 1.0);

    return uv;
}

struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
    float2 TexCoords : TEXCOORD;
};

float4 PS(VS_OUTPUT input) : SV_Target
{
    // uv
    float2 uv = input.TexCoords;

    // Same texture tiles repeat on the water surface
    uv *= scaleVal;

    // Scrolling and panning
    uv.x += uTime * 0.04;
    uv.y += uTime * 0.03;

    // Compound Sine Curve for uv
    uv = distortUV(uv, uTime);

    // First for white lines and use sample1 as a mask
    float4 sample1 = tex.Sample(samp, frac(uv)); 

    // Second for dark lines and slightly offset uv
    // Offset uv make dark blue line does not overlap white line
    float2 uv2 = uv + float2(0.15, -0.1);
    uv2 = distortUV(uv2, uTime * 1.1);
    float4 sample2 = tex.Sample(samp, frac(uv2));

    // basic color blue
    float3 baseColor = uColor;

    // Get line info from texture
    // According to lineFactor to choose line strength
    float lineFactor1 = (sample1.r + sample1.g + sample1.b)/3.0;
    float lineFactor2 = (sample2.r + sample2.g + sample2.b)/3.0;

    // First overlay: white lines on bright area
    float3 lineColor1 = lerp(baseColor, float3(1.0,1.0,1.0), lineFactor1);

    // Dark blue lines as shadows
    float3 darkBlue = float3(uColor.r * 0.0, uColor.g * 0.0, uColor.b * 0.15);
    float shadowIntensity = 0.15; // Shadows strength
    float3 shadowedLineColor = lerp(lineColor1, darkBlue, lineFactor2 * shadowIntensity);

    return float4(shadowedLineColor, 1.0);
}
